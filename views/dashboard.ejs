<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WeatherCast - Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2196f3;
            --secondary-color: #64b5f6;
            --accent-color: #ff6b6b;
            --dark-bg: #1a237e;
            --card-bg: rgba(255, 255, 255, 0.1);
            --success-color: #4caf50;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, #1a237e 0%, #0d47a1 100%);
            min-height: 100vh;
            color: #fff;
        }

        .navbar {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .navbar-brand {
            font-size: 1.5rem;
            font-weight: 700;
            color: #fff !important;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8) !important;
            transition: all 0.3s ease;
        }

        .nav-link:hover {
            color: #fff !important;
            transform: translateY(-2px);
        }

        .weather-icon {
            animation: weather-float 3s ease-in-out infinite;
        }

        @keyframes weather-float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .dashboard-card {
            background: var(--card-bg);
            border-radius: 20px;
            padding: 1.5rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
        }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .card-icon {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--accent-color);
        }

        .weather-stats {
            font-size: 2rem;
            font-weight: 600;
            margin: 0.5rem 0;
        }

        .btn-predict {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            border: none;
            padding: 12px 25px;
            border-radius: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-predict:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
        }

        .quick-actions {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
        }

        .action-btn {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--accent-color);
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0.5rem 0;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .action-btn:hover {
            transform: scale(1.1);
        }

        .location-card {
            position: relative;
            overflow: hidden;
        }

        .location-card .location-icon {
            font-size: 2.5rem;
            color: var(--accent-color);
            animation: pulse 2s infinite;
        }

        .location-info {
            margin-top: 1rem;
        }

        .location-status {
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .location-status.success {
            color: var(--success-color);
        }

        .location-status.error {
            color: var(--accent-color);
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .detect-location-btn {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            border: none;
            padding: 10px 20px;
            border-radius: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .detect-location-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
        }

        .user-profile {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50px;
            margin-left: 1rem;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            margin-right: 10px;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark sticky-top mb-4">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-cloud-sun weather-icon me-2"></i>
                WeatherCast
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="/dashboard">
                            <i class="fas fa-home me-1"></i> Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/predict">
                            <i class="fas fa-cloud-rain me-1"></i> Predict Weather
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/history">
                            <i class="fas fa-history me-1"></i> History
                        </a>
                    </li>
                </ul>
                <div class="user-profile">
                    <img src="https://ui-avatars.com/api/?name=<%= name %>&background=random" class="user-avatar" alt="User Avatar">
                    <span class="text-white"><%= name %></span>
                    <a href="/logout" class="nav-link ms-3">
                        <i class="fas fa-sign-out-alt"></i>
                    </a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container py-4">
        <!-- Welcome Section -->
        <div class="row mb-4">
            <div class="col-12">
                <h1 class="display-5 mb-4">Welcome back, <%= name %>! 👋</h1>
            </div>
        </div>

        <!-- Weather Cards -->
        <div class="row g-4">
            <!-- Current Weather -->
            <div class="col-md-6 col-lg-3">
                <div class="dashboard-card">
                    <i class="fas fa-temperature-high card-icon"></i>
                    <h3>Current Weather</h3>
                    <div class="weather-stats">28°C</div>
                    <p class="text-white-50">Partly Cloudy</p>
                </div>
            </div>

            <!-- Precipitation -->
            <div class="col-md-6 col-lg-3">
                <div class="dashboard-card">
                    <i class="fas fa-cloud-rain card-icon"></i>
                    <h3>Precipitation</h3>
                    <div class="weather-stats">65%</div>
                    <p class="text-white-50">Chance of Rain</p>
                </div>
            </div>

            <!-- Wind Speed -->
            <div class="col-md-6 col-lg-3">
                <div class="dashboard-card">
                    <i class="fas fa-wind card-icon"></i>
                    <h3>Wind Speed</h3>
                    <div class="weather-stats">12</div>
                    <p class="text-white-50">km/h</p>
                </div>
            </div>

            <!-- Humidity -->
            <div class="col-md-6 col-lg-3">
                <div class="dashboard-card">
                    <i class="fas fa-tint card-icon"></i>
                    <h3>Humidity</h3>
                    <div class="weather-stats">75%</div>
                    <p class="text-white-50">Relative Humidity</p>
                </div>
            </div>

            <!-- Location Card -->
            <div class="col-12 mt-4">
                <div class="dashboard-card location-card">
                    <div class="row align-items-center">
                        <div class="col-md-1 text-center">
                            <i class="fas fa-location-dot location-icon"></i>
                        </div>
                        <div class="col-md-8">
                            <h3>Your Location</h3>
                            <div class="location-info">
                                <p id="locationDisplay" class="mb-1">Click the button to detect your location</p>
                                <p id="locationStatus" class="location-status"></p>
                            </div>
                        </div>
                        <div class="col-md-3 text-md-end">
                            <button onclick="detectLocation()" class="btn btn-light detect-location-btn">
                                <i class="fas fa-crosshairs me-2"></i>Detect Location
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Prediction Section -->
        <div class="row mt-5">
            <div class="col-12">
                <div class="dashboard-card">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-3">Ready to Make a Weather Prediction?</h2>
                            <p class="text-white-50 mb-4">Use our advanced ML model to predict weather conditions with high accuracy.</p>
                        </div>
                        <div class="col-md-4 text-md-end">
                            <a href="/predict" class="btn btn-light btn-predict">
                                <i class="fas fa-meteor me-2"></i>Start Prediction
                            </a>
                            <a href="/location" class="btn btn-outline-light ms-2">
                                <i class="fas fa-map-marker-alt me-2"></i>See Location
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Action Buttons -->
    <div class="quick-actions">
        <a href="/predict" class="action-btn" title="Quick Predict">
            <i class="fas fa-bolt"></i>
        </a>
        <a href="#top" class="action-btn" title="Back to Top">
            <i class="fas fa-arrow-up"></i>
        </a>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function detectLocation() {
            const locationDisplay = document.getElementById('locationDisplay');
            const locationStatus = document.getElementById('locationStatus');
            
            // Reset status
            locationStatus.className = 'location-status';
            locationDisplay.textContent = 'Detecting your location...';
            
            if (!navigator.geolocation) {
                locationStatus.textContent = 'Geolocation is not supported by your browser';
                locationStatus.classList.add('error');
                return;
            }

            navigator.geolocation.getCurrentPosition(
                // Success callback
                async (position) => {
                    const { latitude, longitude } = position.coords;
                    
                    try {
                        // Reverse geocoding using OpenStreetMap Nominatim API
                        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`);
                        const data = await response.json();
                        
                        // Format the address
                        const address = data.address;
                        const city = address.city || address.town || address.village || address.suburb;
                        const state = address.state;
                        const country = address.country;
                        
                        locationDisplay.textContent = `📍 ${city}, ${state}, ${country}`;
                        locationStatus.textContent = 'Location detected successfully!';
                        locationStatus.classList.add('success');

                        // You can store these coordinates in hidden inputs or send to server
                        console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);
                        
                    } catch (error) {
                        locationDisplay.textContent = `📍 ${latitude.toFixed(4)}°N, ${longitude.toFixed(4)}°E`;
                        locationStatus.textContent = 'Coordinates detected (Address lookup failed)';
                        locationStatus.classList.add('success');
                    }
                },
                // Error callback
                (error) => {
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            locationStatus.textContent = "Location access was denied";
                            break;
                        case error.POSITION_UNAVAILABLE:
                            locationStatus.textContent = "Location information is unavailable";
                            break;
                        case error.TIMEOUT:
                            locationStatus.textContent = "Location request timed out";
                            break;
                        default:
                            locationStatus.textContent = "An unknown error occurred";
                    }
                    locationStatus.classList.add('error');
                },
                // Options
                {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                }
            );
        }
    </script>
</body>
</html>
