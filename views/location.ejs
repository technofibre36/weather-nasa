<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>raincheck - Your Location</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body { font-family: 'Poppins', sans-serif; background: linear-gradient(135deg,#1a237e 0%,#0d47a1 100%); color:#fff; min-height:100vh; }
        .container { padding-top:2.5rem; }
        .map-card { background: rgba(255,255,255,0.06); border-radius:12px; padding:1rem; border:1px solid rgba(255,255,255,0.06); }
        #map { width:100%; height:60vh; border-radius:8px; }
        .btn-detect { background: linear-gradient(45deg,#2196f3,#64b5f6); border: none; color:#fff; }
    </style>
</head>
<body>
<nav class="navbar navbar-dark" style="background:rgba(0,0,0,0.15);">
  <div class="container-fluid">
  <a class="navbar-brand" href="/dashboard"><i class="fas fa-cloud-sun me-2"></i>raincheck</a>
    <div class="d-flex align-items-center">
      <span class="me-3 text-white-50"><%= name %></span>
      <a href="/logout" class="btn btn-outline-light btn-sm">Logout</a>
    </div>
  </div>
</nav>

<div class="container">
  <div class="map-card">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <div>
        <h4 class="mb-0">Your Current Location</h4>
        <small class="text-white-50">Click detect to center the map on your device location and view rainfall</small>
      </div>
      <div>
        <button id="detectNow" class="btn btn-detect"><i class="fas fa-crosshairs me-2"></i>Detect Now</button>
      </div>
    </div>

    <div id="map"></div>

    <!-- Travel Destination Form -->
    <div class="mt-3 p-3" style="background:rgba(255,255,255,0.06);border-radius:8px;">
      <h5 class="mb-3">Check Weather at Your Destination</h5>
      <form action="/location" method="POST" class="row g-3">
        <div class="col-md-6">
          <label for="destination" class="form-label">Where are you going?</label>
          <input type="text" class="form-control bg-dark text-white" id="destination" name="destination" placeholder="Enter city or place name" required>
        </div>
        <div class="col-md-4">
          <label for="travelDate" class="form-label">When are you traveling?</label>
          <input type="date" class="form-control bg-dark text-white" id="travelDate" name="travelDate" 
                 min="<%= new Date().toISOString().split('T')[0] %>" 
                 max="<%= new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] %>" required>
        </div>
        <div class="col-md-2">
          <label class="form-label">&nbsp;</label>
          <button type="submit" class="btn btn-detect w-100">Check Weather</button>
        </div>
      </form>
    </div>

    <% if (typeof searchedLocation !== 'undefined' && searchedLocation) { %>
    <div class="mt-3 p-3" style="background:rgba(255,255,255,0.06);border-radius:8px;">
      <h5>Weather Forecast for <%= searchedLocation.name %></h5>
      <p class="text-white-50 small mb-3"><%= searchedLocation.display_name %></p>
      
      <div class="row">
        <% for(let i = 0; i < Math.min(7, forecast.daily.time.length); i++) { %>
          <div class="col-md-3 mb-3">
            <div class="p-3" style="background:rgba(255,255,255,0.03);border-radius:8px;">
              <h6><%= new Date(forecast.daily.time[i]).toLocaleDateString('en-US', {weekday: 'short', month: 'short', day: 'numeric'}) %></h6>
              <div class="text-white-50 small">Temperature</div>
              <div style="font-weight:700;">
                <%= forecast.daily.temperature_2m_min[i] %>°C to <%= forecast.daily.temperature_2m_max[i] %>°C
              </div>
              <div class="text-white-50 small mt-2">Precipitation</div>
              <div style="font-weight:700;"><%= forecast.daily.precipitation_sum[i] %> mm</div>
            </div>
          </div>
        <% } %>
      </div>
    </div>
    <% } %>

    <div class="mt-2">
      <div class="d-flex justify-content-between mb-2">
        <div id="coords" class="text-white-50">Lat: — , Lon: —</div>
        <div id="rain" class="text-white-50">Precipitation: —</div>
      </div>

      <!-- Live weather panel -->
      <div id="weatherPanel" class="d-flex gap-3 flex-wrap">
        <div class="p-2" style="background:rgba(255,255,255,0.03);border-radius:8px;min-width:120px;">
          <div class="text-white-50 small">Temperature</div>
          <div id="temp" style="font-weight:700;font-size:1.1rem">— °C</div>
        </div>
        <div class="p-2" style="background:rgba(255,255,255,0.03);border-radius:8px;min-width:120px;">
          <div class="text-white-50 small">Humidity</div>
          <div id="humidity" style="font-weight:700;font-size:1.1rem">— %</div>
        </div>
        <div class="p-2" style="background:rgba(255,255,255,0.03);border-radius:8px;min-width:120px;">
          <div class="text-white-50 small">Wind Speed</div>
          <div id="wind" style="font-weight:700;font-size:1.1rem">— m/s</div>
        </div>
        <div class="p-2" style="background:rgba(255,255,255,0.03);border-radius:8px;min-width:160px;">
          <div class="text-white-50 small">Conditions</div>
          <div id="conditions" style="font-weight:700;font-size:1.1rem">—</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
  const map = L.map('map').setView([20,0],2);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom:19, attribution:'&copy; OpenStreetMap contributors' }).addTo(map);
  let marker = null; let circle = null; let liveInterval = null;

  async function reverseGeocode(lat, lon){
    try{ const r = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`); const j = await r.json(); return j.display_name || ''; }catch(e){ return '' }
  }

  async function fetchRecentPrecip(lat, lon){
    try{
      const now = new Date();
      const end = now.toISOString().slice(0,19);
      const start = new Date(now.getTime() - 3*60*60*1000).toISOString().slice(0,19);
      const url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=precipitation&current_weather=true&timezone=UTC&start=${start}&end=${end}`;
      const resp = await fetch(url); const j = await resp.json();
      const precipArr = j.hourly && j.hourly.precipitation;
      const latestPrecip = (Array.isArray(precipArr) && precipArr.length) ? Number(precipArr[precipArr.length-1]) : null;
      const current = j.current_weather || null;
      return { precip: latestPrecip, current };
    }catch(e){ console.error('fetchRecentPrecip', e); return { precip: null, current: null } }
  }

  function colorFor(mm){ if(mm===null) return '#888'; if(mm<0.5) return '#4caf50'; if(mm<5) return '#ffeb3b'; return '#f44336'; }

  function updateLivePanel(current, precip){
    if(current){
      document.getElementById('temp').textContent = `${current.temperature} °C`;
      document.getElementById('wind').textContent = `${current.windspeed} m/s`;
      // Open-Meteo current_weather doesn't include humidity — fetch hourly or use other endpoint if needed
      document.getElementById('conditions').textContent = current.weathercode !== undefined ? `Code ${current.weathercode}` : '—';
    }
    document.getElementById('rain').textContent = `Precipitation: ${precip!==null?precip+' mm':'N/A'}`;
  }

  async function showAndLiveUpdate(lat, lon){
    if(marker) map.removeLayer(marker); if(circle) map.removeLayer(circle);
    marker = L.marker([lat,lon]).addTo(map);
    map.setView([lat,lon],13);
    document.getElementById('coords').textContent = `Lat: ${lat.toFixed(5)} , Lon: ${lon.toFixed(5)}`;

    async function refresh(){
      const r = await fetchRecentPrecip(lat, lon);
      const precip = r.precip;
      const current = r.current;
      const c = colorFor(precip);
      if(circle) map.removeLayer(circle);
      circle = L.circle([lat,lon],{ color:c, fillColor:c, fillOpacity:0.25, radius:2000 }).addTo(map);
      updateLivePanel(current, precip);
      const place = await reverseGeocode(lat, lon);
      marker.bindPopup(`<strong>${place||'Your location'}</strong><br/>Temp: ${current?current.temperature+' °C':'N/A'}<br/>Precip: ${precip!==null?precip+' mm':'N/A'}`).openPopup();
    }

    // initial refresh and then periodic updates
    await refresh();
    if(liveInterval) clearInterval(liveInterval);
    liveInterval = setInterval(refresh, 60 * 1000); // every 60s
  }

  async function detect(){
    const btn = document.getElementById('detectNow'); btn.disabled=true; btn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Detecting...';
    if(!navigator.geolocation){ alert('Geolocation not supported'); btn.disabled=false; btn.innerHTML='<i class="fas fa-crosshairs me-2"></i>Detect Now'; return }
    navigator.geolocation.getCurrentPosition(async (p)=>{
      const lat=p.coords.latitude, lon=p.coords.longitude;
      await showAndLiveUpdate(lat, lon);
      btn.disabled=false; btn.innerHTML = '<i class="fas fa-check me-2"></i>Detected'; setTimeout(()=>btn.innerHTML='<i class="fas fa-crosshairs me-2"></i>Detect Now',2000);
    }, (err)=>{ alert('Unable to detect: '+(err.message||err.code)); btn.disabled=false; btn.innerHTML='<i class="fas fa-crosshairs me-2"></i>Detect Now'; }, { enableHighAccuracy:true, timeout:10000 });
  }

  document.getElementById('detectNow').addEventListener('click', detect);
</script>
</body>
</html>
